// This file is auto-generated by src/experimental/html/internal/codegen/generator.mbt, do not edit it directly.

///|
pub fn[M] html(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "html",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] head(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "head",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] title_(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "title",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] base(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  href? : String,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  target? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "base",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      href.map(attribute("href", _)),
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      target.map(attribute("target", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] link(
  accesskey? : String,
  as_? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  crossorigin? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  href? : String,
  hreflang? : String,
  id? : String,
  integrity? : String,
  itemprop? : String,
  lang? : String,
  media? : String,
  referrerpolicy? : String,
  rel? : String,
  role? : String,
  sizes? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  type_? : String,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "link",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      as_.map(attribute("as", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      crossorigin.map(attribute("crossorigin", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      href.map(attribute("href", _)),
      hreflang.map(attribute("hreflang", _)),
      id.map(attribute("id", _)),
      integrity.map(attribute("integrity", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      media.map(attribute("media", _)),
      referrerpolicy.map(attribute("referrerpolicy", _)),
      rel.map(attribute("rel", _)),
      role.map(attribute("role", _)),
      sizes.map(attribute("sizes", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      type_.map(attribute("type", _)),
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] meta(
  accesskey? : String,
  autocapitalize? : String,
  charset? : String,
  class? : String,
  content? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  http_equiv? : String,
  id? : String,
  itemprop? : String,
  lang? : String,
  name? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "meta",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      charset.map(attribute("charset", _)),
      class.map(attribute("class", _)),
      content.map(attribute("content", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      http_equiv.map(attribute("http-equiv", _)),
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      name.map(attribute("name", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] style(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  media? : String,
  role? : String,
  scoped~ : Bool = false,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  type_? : String,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "style",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      media.map(attribute("media", _)),
      role.map(attribute("role", _)),
      if scoped {
        Some(attribute("scoped", ""))
      } else {
        None
      },
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      type_.map(attribute("type", _)),
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] body(
  accesskey? : String,
  autocapitalize? : String,
  background? : String,
  bgcolor? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "body",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      background.map(attribute("background", _)),
      bgcolor.map(attribute("bgcolor", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] address(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "address",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] article(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "article",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] aside(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "aside",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] footer(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "footer",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] header(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "header",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] h1(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "h1",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] h2(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "h2",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] h3(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "h3",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] h4(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "h4",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] h5(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "h5",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] h6(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "h6",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] hgroup(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "hgroup",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] main_(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "main",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] nav(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "nav",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] section(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "section",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] search(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "search",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] blockquote(
  accesskey? : String,
  autocapitalize? : String,
  cite? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "blockquote",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      cite.map(attribute("cite", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] dd(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "dd",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] div(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "div",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] dl(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "dl",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] dt(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "dt",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] figcaption(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "figcaption",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] figure(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "figure",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] hr(
  accesskey? : String,
  align? : String,
  autocapitalize? : String,
  class? : String,
  color? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "hr",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      align.map(attribute("align", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      color.map(attribute("color", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] li(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  value? : String,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "li",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      value.map(x => property("value", String(x))),
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] menu(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  type_? : String,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "menu",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      type_.map(attribute("type", _)),
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] ol(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  reversed~ : Bool = false,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  start? : String,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  type_? : String,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "ol",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      if reversed {
        Some(attribute("reversed", ""))
      } else {
        None
      },
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      start.map(attribute("start", _)),
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      type_.map(attribute("type", _)),
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] p(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "p",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] pre(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "pre",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] ul(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "ul",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] a(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "a",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] abbr(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "abbr",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] b(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "b",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] bdi(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "bdi",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] bdo(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "bdo",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] br(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "br",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] cite(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "cite",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] code(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "code",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] data_(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  value? : String,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "data",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      value.map(x => property("value", String(x))),
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] dfn(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "dfn",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] em(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "em",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] i(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "i",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] kbd(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "kbd",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] mark(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "mark",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] q(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "q",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] rp(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "rp",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] rt(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "rt",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] ruby(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "ruby",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] s(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "s",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] samp(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "samp",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] small(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "small",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] span(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "span",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] strong(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "strong",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] sub(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "sub",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] sup(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "sup",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] time_(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  datetime? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "time",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      datetime.map(attribute("datetime", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] u(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "u",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] var_(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "var",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] wbr(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "wbr",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] area(
  accesskey? : String,
  alt? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  coords? : String,
  dir? : String,
  download? : String,
  draggable? : String,
  hidden~ : Bool = false,
  href? : String,
  id? : String,
  itemprop? : String,
  lang? : String,
  media? : String,
  ping? : String,
  referrerpolicy? : String,
  rel? : String,
  role? : String,
  shape? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  target? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "area",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      alt.map(attribute("alt", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      coords.map(attribute("coords", _)),
      dir.map(attribute("dir", _)),
      download.map(attribute("download", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      href.map(attribute("href", _)),
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      media.map(attribute("media", _)),
      ping.map(attribute("ping", _)),
      referrerpolicy.map(attribute("referrerpolicy", _)),
      rel.map(attribute("rel", _)),
      role.map(attribute("role", _)),
      shape.map(attribute("shape", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      target.map(attribute("target", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] audio(
  accesskey? : String,
  autocapitalize? : String,
  autoplay~ : Bool = false,
  class? : String,
  contenteditable? : String,
  controls~ : Bool = false,
  crossorigin? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  loop_~ : Bool = false,
  muted~ : Bool = false,
  preload? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  src? : String,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "audio",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      if autoplay {
        Some(attribute("autoplay", ""))
      } else {
        None
      },
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      if controls {
        Some(attribute("controls", ""))
      } else {
        None
      },
      crossorigin.map(attribute("crossorigin", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      if loop_ {
        Some(attribute("loop", ""))
      } else {
        None
      },
      if muted {
        Some(attribute("muted", ""))
      } else {
        None
      },
      preload.map(attribute("preload", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      src.map(attribute("src", _)),
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] img(
  accesskey? : String,
  align? : String,
  alt? : String,
  autocapitalize? : String,
  border? : String,
  class? : String,
  contenteditable? : String,
  crossorigin? : String,
  decoding? : String,
  dir? : String,
  draggable? : String,
  elementtiming? : String,
  height? : String,
  hidden~ : Bool = false,
  id? : String,
  intrinsicsize? : String,
  ismap~ : Bool = false,
  itemprop? : String,
  lang? : String,
  loading? : String,
  referrerpolicy? : String,
  role? : String,
  sizes? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  src? : String,
  srcset? : String,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  usemap? : String,
  width? : String,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "img",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      align.map(attribute("align", _)),
      alt.map(attribute("alt", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      border.map(attribute("border", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      crossorigin.map(attribute("crossorigin", _)),
      decoding.map(attribute("decoding", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      elementtiming.map(attribute("elementtiming", _)),
      height.map(attribute("height", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      intrinsicsize.map(attribute("intrinsicsize", _)),
      if ismap {
        Some(attribute("ismap", ""))
      } else {
        None
      },
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      loading.map(attribute("loading", _)),
      referrerpolicy.map(attribute("referrerpolicy", _)),
      role.map(attribute("role", _)),
      sizes.map(attribute("sizes", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      src.map(attribute("src", _)),
      srcset.map(attribute("srcset", _)),
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      usemap.map(attribute("usemap", _)),
      width.map(attribute("width", _)),
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] map(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  name? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "map",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      name.map(attribute("name", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] track(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  default_~ : Bool = false,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  kind? : String,
  label? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  src? : String,
  srclang? : String,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "track",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      if default_ {
        Some(attribute("default", ""))
      } else {
        None
      },
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      kind.map(attribute("kind", _)),
      label.map(attribute("label", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      src.map(attribute("src", _)),
      srclang.map(attribute("srclang", _)),
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] video(
  accesskey? : String,
  autocapitalize? : String,
  autoplay~ : Bool = false,
  class? : String,
  contenteditable? : String,
  controls~ : Bool = false,
  crossorigin? : String,
  dir? : String,
  draggable? : String,
  elementtiming? : String,
  height? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  loop_~ : Bool = false,
  muted~ : Bool = false,
  playsinline~ : Bool = false,
  poster? : String,
  preload? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  src? : String,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  width? : String,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "video",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      if autoplay {
        Some(attribute("autoplay", ""))
      } else {
        None
      },
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      if controls {
        Some(attribute("controls", ""))
      } else {
        None
      },
      crossorigin.map(attribute("crossorigin", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      elementtiming.map(attribute("elementtiming", _)),
      height.map(attribute("height", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      if loop_ {
        Some(attribute("loop", ""))
      } else {
        None
      },
      if muted {
        Some(attribute("muted", ""))
      } else {
        None
      },
      if playsinline {
        Some(attribute("playsinline", ""))
      } else {
        None
      },
      poster.map(attribute("poster", _)),
      preload.map(attribute("preload", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      src.map(attribute("src", _)),
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      width.map(attribute("width", _)),
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] embed(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  height? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  src? : String,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  type_? : String,
  width? : String,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "embed",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      height.map(attribute("height", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      src.map(attribute("src", _)),
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      type_.map(attribute("type", _)),
      width.map(attribute("width", _)),
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] fencedframe(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "fencedframe",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] iframe(
  accesskey? : String,
  align? : String,
  allow? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  csp? : String,
  dir? : String,
  draggable? : String,
  height? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  loading? : String,
  name? : String,
  referrerpolicy? : String,
  role? : String,
  sandbox? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  src? : String,
  srcdoc? : String,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  width? : String,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "iframe",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      align.map(attribute("align", _)),
      allow.map(attribute("allow", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      csp.map(attribute("csp", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      height.map(attribute("height", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      loading.map(attribute("loading", _)),
      name.map(attribute("name", _)),
      referrerpolicy.map(attribute("referrerpolicy", _)),
      role.map(attribute("role", _)),
      sandbox.map(attribute("sandbox", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      src.map(attribute("src", _)),
      srcdoc.map(attribute("srcdoc", _)),
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      width.map(attribute("width", _)),
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] object_(
  accesskey? : String,
  autocapitalize? : String,
  border? : String,
  class? : String,
  contenteditable? : String,
  data? : String,
  dir? : String,
  draggable? : String,
  form? : String,
  height? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  name? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  type_? : String,
  usemap? : String,
  width? : String,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "object",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      border.map(attribute("border", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      data.map(attribute("data", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      form.map(attribute("form", _)),
      height.map(attribute("height", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      name.map(attribute("name", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      type_.map(attribute("type", _)),
      usemap.map(attribute("usemap", _)),
      width.map(attribute("width", _)),
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] picture(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "picture",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] source(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  media? : String,
  role? : String,
  sizes? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  src? : String,
  srcset? : String,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  type_? : String,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "source",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      media.map(attribute("media", _)),
      role.map(attribute("role", _)),
      sizes.map(attribute("sizes", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      src.map(attribute("src", _)),
      srcset.map(attribute("srcset", _)),
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      type_.map(attribute("type", _)),
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] svg(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "svg",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] math_(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "math",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] canvas(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  height? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  width? : String,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "canvas",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      height.map(attribute("height", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      width.map(attribute("width", _)),
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] noscript(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "noscript",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] script(
  accesskey? : String,
  async_~ : Bool = false,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  crossorigin? : String,
  defer_~ : Bool = false,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  integrity? : String,
  itemprop? : String,
  lang? : String,
  language? : String,
  referrerpolicy? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  src? : String,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  type_? : String,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "script",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      if async_ {
        Some(attribute("async", ""))
      } else {
        None
      },
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      crossorigin.map(attribute("crossorigin", _)),
      if defer_ {
        Some(attribute("defer", ""))
      } else {
        None
      },
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      integrity.map(attribute("integrity", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      language.map(attribute("language", _)),
      referrerpolicy.map(attribute("referrerpolicy", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      src.map(attribute("src", _)),
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      type_.map(attribute("type", _)),
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] del_(
  accesskey? : String,
  autocapitalize? : String,
  cite? : String,
  class? : String,
  contenteditable? : String,
  datetime? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "del",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      cite.map(attribute("cite", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      datetime.map(attribute("datetime", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] ins(
  accesskey? : String,
  autocapitalize? : String,
  cite? : String,
  class? : String,
  contenteditable? : String,
  datetime? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "ins",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      cite.map(attribute("cite", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      datetime.map(attribute("datetime", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] caption(
  accesskey? : String,
  align? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "caption",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      align.map(attribute("align", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] col(
  accesskey? : String,
  align? : String,
  autocapitalize? : String,
  bgcolor? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  span? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "col",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      align.map(attribute("align", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      bgcolor.map(attribute("bgcolor", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      span.map(attribute("span", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] colgroup(
  accesskey? : String,
  align? : String,
  autocapitalize? : String,
  bgcolor? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  span? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "colgroup",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      align.map(attribute("align", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      bgcolor.map(attribute("bgcolor", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      span.map(attribute("span", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] table(
  accesskey? : String,
  align? : String,
  autocapitalize? : String,
  background? : String,
  bgcolor? : String,
  border? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  summary? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "table",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      align.map(attribute("align", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      background.map(attribute("background", _)),
      bgcolor.map(attribute("bgcolor", _)),
      border.map(attribute("border", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      summary.map(attribute("summary", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] tbody(
  accesskey? : String,
  align? : String,
  autocapitalize? : String,
  bgcolor? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "tbody",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      align.map(attribute("align", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      bgcolor.map(attribute("bgcolor", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] td(
  accesskey? : String,
  align? : String,
  autocapitalize? : String,
  background? : String,
  bgcolor? : String,
  class? : String,
  colspan? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  headers? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  rowspan? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "td",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      align.map(attribute("align", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      background.map(attribute("background", _)),
      bgcolor.map(attribute("bgcolor", _)),
      class.map(attribute("class", _)),
      colspan.map(attribute("colspan", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      headers.map(attribute("headers", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      rowspan.map(attribute("rowspan", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] textarea(
  accesskey? : String,
  autocapitalize? : String,
  autocomplete? : String,
  class? : String,
  cols? : String,
  contenteditable? : String,
  dir? : String,
  dirname? : String,
  disabled~ : Bool = false,
  draggable? : String,
  enterkeyhint? : String,
  form? : String,
  hidden~ : Bool = false,
  id? : String,
  inputmode? : String,
  itemprop? : String,
  lang? : String,
  maxlength? : String,
  minlength? : String,
  name? : String,
  placeholder? : String,
  readonly_~ : Bool = false,
  required~ : Bool = false,
  role? : String,
  rows? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  wrap? : String,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "textarea",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      autocomplete.map(attribute("autocomplete", _)),
      class.map(attribute("class", _)),
      cols.map(attribute("cols", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      dirname.map(attribute("dirname", _)),
      if disabled {
        Some(attribute("disabled", ""))
      } else {
        None
      },
      draggable.map(attribute("draggable", _)),
      enterkeyhint.map(attribute("enterkeyhint", _)),
      form.map(attribute("form", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      inputmode.map(attribute("inputmode", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      maxlength.map(attribute("maxlength", _)),
      minlength.map(attribute("minlength", _)),
      name.map(attribute("name", _)),
      placeholder.map(attribute("placeholder", _)),
      if readonly_ {
        Some(attribute("readonly", ""))
      } else {
        None
      },
      if required {
        Some(attribute("required", ""))
      } else {
        None
      },
      role.map(attribute("role", _)),
      rows.map(attribute("rows", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      wrap.map(attribute("wrap", _)),
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] tfoot(
  accesskey? : String,
  align? : String,
  autocapitalize? : String,
  bgcolor? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "tfoot",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      align.map(attribute("align", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      bgcolor.map(attribute("bgcolor", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] th(
  accesskey? : String,
  align? : String,
  autocapitalize? : String,
  background? : String,
  bgcolor? : String,
  class? : String,
  colspan? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  headers? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  rowspan? : String,
  scope? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "th",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      align.map(attribute("align", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      background.map(attribute("background", _)),
      bgcolor.map(attribute("bgcolor", _)),
      class.map(attribute("class", _)),
      colspan.map(attribute("colspan", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      headers.map(attribute("headers", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      rowspan.map(attribute("rowspan", _)),
      scope.map(attribute("scope", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] thead(
  accesskey? : String,
  align? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "thead",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      align.map(attribute("align", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] tr(
  accesskey? : String,
  align? : String,
  autocapitalize? : String,
  bgcolor? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "tr",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      align.map(attribute("align", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      bgcolor.map(attribute("bgcolor", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] button(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  disabled~ : Bool = false,
  draggable? : String,
  form? : String,
  formaction? : String,
  formenctype? : String,
  formmethod? : String,
  formnovalidate~ : Bool = false,
  formtarget? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  name? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  type_? : String,
  value? : String,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "button",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      if disabled {
        Some(attribute("disabled", ""))
      } else {
        None
      },
      draggable.map(attribute("draggable", _)),
      form.map(attribute("form", _)),
      formaction.map(attribute("formaction", _)),
      formenctype.map(attribute("formenctype", _)),
      formmethod.map(attribute("formmethod", _)),
      if formnovalidate {
        Some(attribute("formnovalidate", ""))
      } else {
        None
      },
      formtarget.map(attribute("formtarget", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      name.map(attribute("name", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      type_.map(attribute("type", _)),
      value.map(x => property("value", String(x))),
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] datalist(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "datalist",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] fieldset(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  disabled~ : Bool = false,
  draggable? : String,
  form? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  name? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "fieldset",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      if disabled {
        Some(attribute("disabled", ""))
      } else {
        None
      },
      draggable.map(attribute("draggable", _)),
      form.map(attribute("form", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      name.map(attribute("name", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] form(
  accept? : String,
  accept_charset? : String,
  accesskey? : String,
  action? : String,
  autocapitalize? : String,
  autocomplete? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  enctype? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  method_? : String,
  name? : String,
  novalidate~ : Bool = false,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  target? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "form",
    positional=[],
    optional=[
      accept.map(attribute("accept", _)),
      accept_charset.map(attribute("accept-charset", _)),
      accesskey.map(attribute("accesskey", _)),
      action.map(attribute("action", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      autocomplete.map(attribute("autocomplete", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      enctype.map(attribute("enctype", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      method_.map(attribute("method", _)),
      name.map(attribute("name", _)),
      if novalidate {
        Some(attribute("novalidate", ""))
      } else {
        None
      },
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      target.map(attribute("target", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] input(
  accept? : String,
  accesskey? : String,
  alt? : String,
  autocapitalize? : String,
  autocomplete? : String,
  capture? : String,
  checked~ : Bool = false,
  class? : String,
  contenteditable? : String,
  dir? : String,
  dirname? : String,
  disabled~ : Bool = false,
  draggable? : String,
  form? : String,
  formaction? : String,
  formenctype? : String,
  formmethod? : String,
  formnovalidate~ : Bool = false,
  formtarget? : String,
  height? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  list_? : String,
  max? : String,
  maxlength? : String,
  minlength? : String,
  min? : String,
  multiple~ : Bool = false,
  name? : String,
  pattern? : String,
  placeholder? : String,
  readonly_~ : Bool = false,
  required~ : Bool = false,
  role? : String,
  size? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  src? : String,
  step? : String,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  type_? : String,
  usemap? : String,
  value? : String,
  width? : String,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "input",
    positional=[],
    optional=[
      accept.map(attribute("accept", _)),
      accesskey.map(attribute("accesskey", _)),
      alt.map(attribute("alt", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      autocomplete.map(attribute("autocomplete", _)),
      capture.map(attribute("capture", _)),
      if checked {
        Some(attribute("checked", ""))
      } else {
        None
      },
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      dirname.map(attribute("dirname", _)),
      if disabled {
        Some(attribute("disabled", ""))
      } else {
        None
      },
      draggable.map(attribute("draggable", _)),
      form.map(attribute("form", _)),
      formaction.map(attribute("formaction", _)),
      formenctype.map(attribute("formenctype", _)),
      formmethod.map(attribute("formmethod", _)),
      if formnovalidate {
        Some(attribute("formnovalidate", ""))
      } else {
        None
      },
      formtarget.map(attribute("formtarget", _)),
      height.map(attribute("height", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      list_.map(attribute("list", _)),
      max.map(attribute("max", _)),
      maxlength.map(attribute("maxlength", _)),
      minlength.map(attribute("minlength", _)),
      min.map(attribute("min", _)),
      if multiple {
        Some(attribute("multiple", ""))
      } else {
        None
      },
      name.map(attribute("name", _)),
      pattern.map(attribute("pattern", _)),
      placeholder.map(attribute("placeholder", _)),
      if readonly_ {
        Some(attribute("readonly", ""))
      } else {
        None
      },
      if required {
        Some(attribute("required", ""))
      } else {
        None
      },
      role.map(attribute("role", _)),
      size.map(attribute("size", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      src.map(attribute("src", _)),
      step.map(attribute("step", _)),
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      type_.map(attribute("type", _)),
      usemap.map(attribute("usemap", _)),
      value.map(x => property("value", String(x))),
      width.map(attribute("width", _)),
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] label(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  for_? : String,
  form? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "label",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      for_.map(attribute("for", _)),
      form.map(attribute("form", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] legend(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "legend",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] meter(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  form? : String,
  hidden~ : Bool = false,
  high? : String,
  id? : String,
  itemprop? : String,
  lang? : String,
  low? : String,
  max? : String,
  min? : String,
  optimum? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  value? : String,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "meter",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      form.map(attribute("form", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      high.map(attribute("high", _)),
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      low.map(attribute("low", _)),
      max.map(attribute("max", _)),
      min.map(attribute("min", _)),
      optimum.map(attribute("optimum", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      value.map(x => property("value", String(x))),
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] optgroup(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  disabled~ : Bool = false,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  label? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "optgroup",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      if disabled {
        Some(attribute("disabled", ""))
      } else {
        None
      },
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      label.map(attribute("label", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] option(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  disabled~ : Bool = false,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  label? : String,
  lang? : String,
  role? : String,
  selected~ : Bool = false,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  value? : String,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "option",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      if disabled {
        Some(attribute("disabled", ""))
      } else {
        None
      },
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      label.map(attribute("label", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      if selected {
        Some(attribute("selected", ""))
      } else {
        None
      },
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      value.map(x => property("value", String(x))),
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] output(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  for_? : String,
  form? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  name? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "output",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      for_.map(attribute("for", _)),
      form.map(attribute("form", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      name.map(attribute("name", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] progress(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  form? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  max? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  value? : String,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "progress",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      form.map(attribute("form", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      max.map(attribute("max", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      value.map(x => property("value", String(x))),
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] select(
  accesskey? : String,
  autocapitalize? : String,
  autocomplete? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  disabled~ : Bool = false,
  draggable? : String,
  form? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  multiple~ : Bool = false,
  name? : String,
  required~ : Bool = false,
  role? : String,
  size? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "select",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      autocomplete.map(attribute("autocomplete", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      if disabled {
        Some(attribute("disabled", ""))
      } else {
        None
      },
      draggable.map(attribute("draggable", _)),
      form.map(attribute("form", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      if multiple {
        Some(attribute("multiple", ""))
      } else {
        None
      },
      name.map(attribute("name", _)),
      if required {
        Some(attribute("required", ""))
      } else {
        None
      },
      role.map(attribute("role", _)),
      size.map(attribute("size", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] selectedcontent(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "selectedcontent",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] details(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  open_~ : Bool = false,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "details",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      if open_ {
        Some(attribute("open", ""))
      } else {
        None
      },
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] dialog(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  open_~ : Bool = false,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "dialog",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      if open_ {
        Some(attribute("open", ""))
      } else {
        None
      },
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] summary(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "summary",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] slot(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "slot",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] template(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "template",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] font(
  accesskey? : String,
  autocapitalize? : String,
  class? : String,
  color? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "font",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      class.map(attribute("class", _)),
      color.map(attribute("color", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}

///|
pub fn[M] marquee(
  accesskey? : String,
  autocapitalize? : String,
  bgcolor? : String,
  class? : String,
  contenteditable? : String,
  dir? : String,
  draggable? : String,
  hidden~ : Bool = false,
  id? : String,
  itemprop? : String,
  lang? : String,
  loop_~ : Bool = false,
  role? : String,
  slot? : String,
  spellcheck~ : Bool = false,
  style? : String,
  tabindex? : String,
  title? : String,
  translate~ : Bool = false,
  on_change? : (String) -> M,
  on_click? : (Mouse) -> M,
  on_dbl_click? : (Mouse) -> M,
  on_input? : (String) -> M,
  on_mouse_down? : (Mouse) -> M,
  on_mouse_enter? : (Mouse) -> M,
  on_mouse_leave? : (Mouse) -> M,
  on_mouse_move? : (Mouse) -> M,
  on_mouse_out? : (Mouse) -> M,
  on_mouse_over? : (Mouse) -> M,
  on_mouse_up? : (Mouse) -> M,
  on_scroll? : (Scroll) -> M,
  children : Array[Html[M]],
) -> Html[M] {
  make_node(
    "marquee",
    positional=[],
    optional=[
      accesskey.map(attribute("accesskey", _)),
      autocapitalize.map(attribute("autocapitalize", _)),
      bgcolor.map(attribute("bgcolor", _)),
      class.map(attribute("class", _)),
      contenteditable.map(attribute("contenteditable", _)),
      dir.map(attribute("dir", _)),
      draggable.map(attribute("draggable", _)),
      if hidden {
        Some(attribute("hidden", ""))
      } else {
        None
      },
      id.map(attribute("id", _)),
      itemprop.map(attribute("itemprop", _)),
      lang.map(attribute("lang", _)),
      if loop_ {
        Some(attribute("loop", ""))
      } else {
        None
      },
      role.map(attribute("role", _)),
      slot.map(attribute("slot", _)),
      if spellcheck {
        Some(attribute("spellcheck", ""))
      } else {
        None
      },
      style.map(attribute("style", _)),
      tabindex.map(attribute("tabindex", _)),
      title.map(attribute("title", _)),
      if translate {
        Some(attribute("translate", ""))
      } else {
        None
      },
      on_change.map(change_event(_)),
      on_click.map(click_event(_)),
      on_dbl_click.map(dblclick_event(_)),
      on_input.map(input_event(_)),
      on_mouse_down.map(mouse_down_event(_)),
      on_mouse_enter.map(mouse_enter_event(_)),
      on_mouse_leave.map(mouse_leave_event(_)),
      on_mouse_move.map(mouse_move_event(_)),
      on_mouse_out.map(mouse_out_event(_)),
      on_mouse_over.map(mouse_over_event(_)),
      on_mouse_up.map(mouse_up_event(_)),
      on_scroll.map(scroll_event(_)),
    ],
    children,
  )
}
