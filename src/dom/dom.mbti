package "Yoorkin/rabbit-tea/dom"

import(
  "rami3l/js-ffi/js"
)

// Values
const DOM_KEY_LOCATION_LEFT : Int = 0x01

const DOM_KEY_LOCATION_NUMPAD : Int = 0x03

const DOM_KEY_LOCATION_RIGHT : Int = 0x02

const DOM_KEY_LOCATION_STANDARD : Int = 0x00

fn[E, R] default_exception_handler(E) -> R

fn document() -> Document

let namespace_html : String

let namespace_mathml : String

let namespace_svg : String

fn window() -> Window

// Types and methods
type AnimationEvent
fn AnimationEvent::get_animation_name(Self) -> String
fn AnimationEvent::get_elapsed_time(Self) -> Double
fn AnimationEvent::get_pseudo_element(Self) -> String
impl IsEvent for AnimationEvent

type BeforeUnloadEvent
impl IsEvent for BeforeUnloadEvent

type Blob

type BlobEvent
fn BlobEvent::get_data(Self) -> Blob
fn BlobEvent::get_timecode(Self) -> Double
fn BlobEvent::new() -> Self
impl IsEvent for BlobEvent

type CanvasGradient
fn CanvasGradient::add_color_stop(Self, Double, String) -> Unit
impl @js.Cast for CanvasGradient

type CanvasLineCap

type CanvasLineJoin

type CanvasPattern
fn CanvasPattern::set_transform(Self, @js.Optional[DOMMatrix2DInit]) -> Unit
impl @js.Cast for CanvasPattern

type CanvasRenderingContext2D
fn CanvasRenderingContext2D::arc(Self, Double, Double, Double, Double, Double, anticlockwise~ : Bool = ..) -> Unit
fn CanvasRenderingContext2D::arc_to(Self, Double, Double, Double, Double, Double) -> Unit
fn CanvasRenderingContext2D::begin_path(Self) -> Unit
fn CanvasRenderingContext2D::bezier_curve_to(Self, Double, Double, Double, Double, Double, Double) -> Unit
fn CanvasRenderingContext2D::clear_rect(Self, Double, Double, Double, Double) -> Unit
fn CanvasRenderingContext2D::clip(Self, fill_rule~ : String = ..) -> Unit
fn CanvasRenderingContext2D::clip_with_path(Self, Path2D, fill_rule~ : String = ..) -> Unit
fn CanvasRenderingContext2D::close_path(Self) -> Unit
fn CanvasRenderingContext2D::create_image_data(Self, Double, Double, settings~ : @js.Optional[ImageDataSettings] = ..) -> ImageData
fn CanvasRenderingContext2D::create_image_data_with_data(Self, ImageData) -> ImageData
fn CanvasRenderingContext2D::create_linear_gradient(Self, Double, Double, Double, Double) -> CanvasGradient
fn CanvasRenderingContext2D::create_radial_gradient(Self, Double, Double, Double, Double, Double, Double) -> CanvasGradient
fn CanvasRenderingContext2D::draw_image(Self, @js.Union7[HTMLImageElement, SVGImageElement, HTMLVideoElement, HTMLCanvasElement, ImageBitmap, OffscreenCanvas, VideoFrame], Double, Double) -> Unit
fn CanvasRenderingContext2D::draw_image_with_size(Self, @js.Union7[HTMLImageElement, SVGImageElement, HTMLVideoElement, HTMLCanvasElement, ImageBitmap, OffscreenCanvas, VideoFrame], Double, Double, Double, Double) -> Unit
fn CanvasRenderingContext2D::draw_image_with_src_and_dst_size(Self, @js.Union7[HTMLImageElement, SVGImageElement, HTMLVideoElement, HTMLCanvasElement, ImageBitmap, OffscreenCanvas, VideoFrame], Double, Double, Double, Double, Double, Double, Double, Double) -> Unit
fn CanvasRenderingContext2D::ellipse(Self, Double, Double, Double, Double, Double, Double, Double, anticlockwise~ : Bool = ..) -> Unit
fn CanvasRenderingContext2D::fill(Self, fill_rule~ : String = ..) -> Unit
fn CanvasRenderingContext2D::fill_path(Self, Path2D, fill_rule~ : String = ..) -> Unit
fn CanvasRenderingContext2D::fill_rect(Self, Double, Double, Double, Double) -> Unit
fn CanvasRenderingContext2D::fill_text(Self, String, Double, Double, max_width~ : @js.Optional[Double] = ..) -> Unit
fn CanvasRenderingContext2D::get_fill_style(Self) -> @js.Union3[String, CanvasGradient, CanvasPattern]
fn CanvasRenderingContext2D::get_font(Self) -> String
fn CanvasRenderingContext2D::get_image_data(Self, Double, Double, Double, Double, settings~ : @js.Optional[ImageDataSettings] = ..) -> ImageData
fn CanvasRenderingContext2D::get_image_smoothing_quality(Self) -> String
fn CanvasRenderingContext2D::get_line_cap(Self) -> CanvasLineCap
fn CanvasRenderingContext2D::get_line_join(Self) -> CanvasLineJoin
fn CanvasRenderingContext2D::get_line_with(Self) -> Double
fn CanvasRenderingContext2D::get_stroke_style(Self) -> @js.Union3[String, CanvasGradient, CanvasPattern]
fn CanvasRenderingContext2D::image_smoothing_enabled(Self) -> Bool
fn CanvasRenderingContext2D::is_context_lost(Self) -> Bool
fn CanvasRenderingContext2D::is_point_in_path(Self, Double, Double, fill_rule~ : String = ..) -> Bool
fn CanvasRenderingContext2D::is_point_in_path_with_path(Self, Path2D, Double, Double, fill_rule~ : String = ..) -> Bool
fn CanvasRenderingContext2D::is_point_in_stroke(Self, Double, Double) -> Bool
fn CanvasRenderingContext2D::is_point_in_stroke_with_path(Self, Path2D, Double, Double) -> Bool
fn CanvasRenderingContext2D::line_to(Self, Double, Double) -> Unit
fn CanvasRenderingContext2D::move_to(Self, Double, Double) -> Unit
fn CanvasRenderingContext2D::put_image_data(Self, ImageData, Int, Int) -> Unit
fn CanvasRenderingContext2D::put_image_data_with_dirty(Self, ImageData, Int, Int, Int, Int, Int, Int) -> Unit
fn CanvasRenderingContext2D::quardratic_curve_to(Self, Double, Double, Double, Double) -> Unit
fn CanvasRenderingContext2D::rect(Self, Double, Double, Double, Double) -> Unit
fn CanvasRenderingContext2D::reset(Self) -> Unit
fn CanvasRenderingContext2D::reset_transform(Self) -> Unit
fn CanvasRenderingContext2D::restore(Self) -> Unit
fn CanvasRenderingContext2D::rotate(Self, Double) -> Unit
fn CanvasRenderingContext2D::round_rect(Self, Double, Double, Double, Double, Double) -> Unit
fn CanvasRenderingContext2D::save(Self) -> Unit
fn CanvasRenderingContext2D::scale(Self, Double, Double) -> Unit
fn CanvasRenderingContext2D::set_fill_style(Self, @js.Union3[String, CanvasGradient, CanvasPattern]) -> Unit
fn CanvasRenderingContext2D::set_font(Self, String) -> Unit
fn CanvasRenderingContext2D::set_image_smoothing_quality(Self, String) -> Unit
fn CanvasRenderingContext2D::set_line_cap(Self, CanvasLineCap) -> Unit
fn CanvasRenderingContext2D::set_line_join(Self, CanvasLineJoin) -> Unit
fn CanvasRenderingContext2D::set_line_width(Self, Double) -> Unit
fn CanvasRenderingContext2D::set_stroke_style(Self, @js.Union3[String, CanvasGradient, CanvasPattern]) -> Unit
fn CanvasRenderingContext2D::set_transform(Self, Double, Double, Double, Double, Double, Double) -> Unit
fn CanvasRenderingContext2D::stroke(Self) -> Unit
fn CanvasRenderingContext2D::stroke_rect(Self, Double, Double, Double, Double) -> Unit
fn CanvasRenderingContext2D::stroke_text(Self, String, Double, Double, max_width~ : @js.Optional[Double] = ..) -> Unit
fn CanvasRenderingContext2D::stroke_with_path(Self, Path2D) -> Unit
fn CanvasRenderingContext2D::transform(Self, Double, Double, Double, Double, Double, Double) -> Unit
fn CanvasRenderingContext2D::translate(Self, Double, Double) -> Unit
impl @js.Cast for CanvasRenderingContext2D

#external
pub type Clipboard
fn Clipboard::read_text(Self) -> @js.Promise
fn Clipboard::write_text(Self, String) -> @js.Promise

type ClipboardEvent
fn ClipboardEvent::clipboard_data(Self) -> DataTransfer
impl IsEvent for ClipboardEvent

type CloseEvent
fn CloseEvent::get_code(Self) -> Int
fn CloseEvent::get_reason(Self) -> String
fn CloseEvent::get_was_clean(Self) -> Bool
impl IsEvent for CloseEvent

type CompositionEvent
fn CompositionEvent::get_data(Self) -> String
fn CompositionEvent::new() -> Self
impl IsEvent for CompositionEvent
impl IsUIEvent for CompositionEvent

type CustomEvent
fn CustomEvent::get_detail(Self) -> @js.Value
fn CustomEvent::new(String, detail~ : @js.Optional[@js.Value] = ..) -> Self
impl IsEvent for CustomEvent

type DOMException
fn DOMException::get_message(Self) -> String
fn DOMException::get_name(Self) -> String
fn DOMException::new() -> Self
fn DOMException::new_with_message(String) -> Self
fn DOMException::new_with_message_and_name(String, String) -> Self

type DOMMatrix2DInit

type DOMRect
fn DOMRect::get_bottom(Self) -> Double
fn DOMRect::get_height(Self) -> Double
fn DOMRect::get_left(Self) -> Double
fn DOMRect::get_right(Self) -> Double
fn DOMRect::get_top(Self) -> Double
fn DOMRect::get_width(Self) -> Double
fn DOMRect::get_x(Self) -> Double
fn DOMRect::get_y(Self) -> Double

type DataTransfer
fn DataTransfer::drop_effect(Self) -> String
fn DataTransfer::effect_allowed(Self) -> String
fn DataTransfer::items(Self) -> DataTransferItemList
fn DataTransfer::set_drog_image(Self, Element, Int, Int) -> Unit

type DataTransferItemList
fn DataTransferItemList::add(Self, String, String) -> Unit
fn DataTransferItemList::clear(Self) -> Unit
fn DataTransferItemList::length(Self) -> Int
fn DataTransferItemList::op_get(Self, Int) -> Unit
fn DataTransferItemList::remove(Self, Int) -> Unit

type Document
fn Document::create_document_fragment(Self) -> DocumentFragment
fn Document::create_element(Self, String) -> Element
fn Document::create_element_ns(Self, String, String, on_namespace_error~ : (DOMException) -> Element = .., on_invalid_character_error~ : (DOMException) -> Element = ..) -> Element
fn Document::create_text_node(Self, String) -> Element
fn Document::get_element_by_id(Self, String) -> @js.Nullable[Element]
fn Document::get_elements_by_class_name(Self, String) -> HTMLCollection
fn Document::get_elements_by_name(Self, String) -> NodeList
fn Document::get_elements_by_tag_name(Self, String) -> HTMLCollection
fn Document::get_elements_by_tag_name_ns(Self, String, String) -> HTMLCollection
fn Document::query_selector(Self, String) -> @js.Nullable[Element]
fn Document::query_selector_all(Self, String) -> NodeList
fn Document::to_node(Self) -> Node

type DocumentFragment
fn DocumentFragment::to_node(Self) -> Node

type DragEvent
fn DragEvent::get_data_transfer(Self) -> DataTransfer
impl IsEvent for DragEvent
impl IsMouseEvent for DragEvent
impl IsUIEvent for DragEvent

type Element
impl IsElement for Element
impl IsEventTarget for Element
impl IsNode for Element

type Event
impl IsEvent for Event

type EventTarget
impl IsEventTarget for EventTarget

type FocusEvent
fn FocusEvent::related_target(Self) -> EventTarget
impl IsEvent for FocusEvent
impl IsUIEvent for FocusEvent

type GPUCanvasContext

type HTMLCanvasElement
fn HTMLCanvasElement::get_context(Self, String) -> @js.Union5[CanvasRenderingContext2D, ImageBitmapRenderingContext, WebGLRenderingContext, WebGL2RenderingContext, GPUCanvasContext]
fn HTMLCanvasElement::get_height(Self) -> Int
fn HTMLCanvasElement::get_width(Self) -> Int
impl IsElement for HTMLCanvasElement
impl IsEventTarget for HTMLCanvasElement
impl IsHtmlElement for HTMLCanvasElement
impl IsNode for HTMLCanvasElement

type HTMLCollection
fn HTMLCollection::get_length(Self) -> Double
fn HTMLCollection::item(Self, Double) -> @js.Nullable[Element]
fn HTMLCollection::named_item(Self, String) -> @js.Nullable[Element]

type HTMLDialogElement
fn HTMLDialogElement::close(Self, return_value~ : @js.Optional[String] = ..) -> Unit
fn HTMLDialogElement::open(Self) -> Bool
fn HTMLDialogElement::request_close(Self, return_value~ : @js.Optional[String] = ..) -> Unit
fn HTMLDialogElement::return_value(Self) -> String
fn HTMLDialogElement::show(Self) -> Unit
fn HTMLDialogElement::show_modal(Self) -> Unit
impl IsElement for HTMLDialogElement
impl IsEventTarget for HTMLDialogElement
impl IsHtmlElement for HTMLDialogElement
impl IsNode for HTMLDialogElement

type HTMLElement
impl IsElement for HTMLElement
impl IsEventTarget for HTMLElement
impl IsHtmlElement for HTMLElement
impl IsNode for HTMLElement

type HTMLImageElement
fn HTMLImageElement::get_alt(Self) -> String
fn HTMLImageElement::get_complete(Self) -> Bool
fn HTMLImageElement::get_cross_origin(Self) -> String
fn HTMLImageElement::get_current_src(Self) -> String
fn HTMLImageElement::get_decoding(Self) -> String
fn HTMLImageElement::get_height(Self) -> Double
fn HTMLImageElement::get_is_map(Self) -> Bool
fn HTMLImageElement::get_loading(Self) -> String
fn HTMLImageElement::get_natural_height(Self) -> Double
fn HTMLImageElement::get_natural_width(Self) -> Double
fn HTMLImageElement::get_referrer_policy(Self) -> String
fn HTMLImageElement::get_sizes(Self) -> String
fn HTMLImageElement::get_src(Self) -> String
fn HTMLImageElement::get_srcset(Self) -> String
fn HTMLImageElement::get_use_map(Self) -> String
fn HTMLImageElement::get_width(Self) -> Double
fn HTMLImageElement::get_x(Self) -> Double
fn HTMLImageElement::get_y(Self) -> Double
fn HTMLImageElement::new() -> Self
fn HTMLImageElement::new_with_size(Double, Double) -> Self
fn HTMLImageElement::set_alt(Self, String) -> Unit
fn HTMLImageElement::set_cross_origin(Self, String) -> Unit
fn HTMLImageElement::set_decoding(Self, String) -> Unit
fn HTMLImageElement::set_height(Self, Double) -> Unit
fn HTMLImageElement::set_is_map(Self, Bool) -> Unit
fn HTMLImageElement::set_loading(Self, String) -> Unit
fn HTMLImageElement::set_natural_height(Self, Double) -> Unit
fn HTMLImageElement::set_natural_width(Self, Double) -> Unit
fn HTMLImageElement::set_referrer_policy(Self, String) -> Unit
fn HTMLImageElement::set_sizes(Self, String) -> Unit
fn HTMLImageElement::set_src(Self, String) -> Unit
fn HTMLImageElement::set_srcset(Self, String) -> Unit
fn HTMLImageElement::set_use_map(Self, String) -> Unit
fn HTMLImageElement::set_width(Self, Double) -> Unit
impl IsElement for HTMLImageElement
impl IsEventTarget for HTMLImageElement
impl IsHtmlElement for HTMLImageElement
impl IsNode for HTMLImageElement

type HTMLInputElement
fn HTMLInputElement::value(Self) -> String
impl IsElement for HTMLInputElement
impl IsEventTarget for HTMLInputElement
impl IsHtmlElement for HTMLInputElement
impl IsNode for HTMLInputElement

type HTMLSelectElement
fn HTMLSelectElement::value(Self) -> String

type HTMLVideoElement

type ImageBitmap

type ImageBitmapRenderingContext

type ImageData
fn ImageData::get_color_space(Self) -> String
fn ImageData::get_data(Self) -> Uint8ClampedArray
fn ImageData::get_height(Self) -> Int
fn ImageData::get_width(Self) -> Int
fn ImageData::new(Int, Int, @js.Optional[ImageDataSettings]) -> Self
fn ImageData::new_with_data(Uint8ClampedArray, Int, Int, settings~ : @js.Optional[ImageDataSettings] = ..) -> Self

type ImageDataSettings
fn ImageDataSettings::new(String) -> Self

type InputEvent
fn InputEvent::data(Self) -> String
fn InputEvent::input_type(Self) -> String
fn InputEvent::is_composing(Self) -> Bool
impl IsEvent for InputEvent
impl IsUIEvent for InputEvent

type KeyboardEvent
fn KeyboardEvent::alt_key(Self) -> Bool
fn KeyboardEvent::code(Self) -> String
fn KeyboardEvent::ctrl_key(Self) -> Bool
fn KeyboardEvent::is_composing(Self) -> Bool
fn KeyboardEvent::key(Self) -> String
fn KeyboardEvent::location(Self) -> Int
fn KeyboardEvent::meta_key(Self) -> Bool
fn KeyboardEvent::repeat(Self) -> Bool
fn KeyboardEvent::shift_key(Self) -> Bool
impl IsEvent for KeyboardEvent
impl IsUIEvent for KeyboardEvent

type MouseEvent
impl IsEvent for MouseEvent
impl IsMouseEvent for MouseEvent
impl IsUIEvent for MouseEvent

#external
pub type Navigator
fn Navigator::clipboard(Self) -> Clipboard

type Node
impl IsEventTarget for Node
impl IsNode for Node

type NodeList
fn NodeList::get_length(Self) -> Double
fn NodeList::item(Self, Double) -> @js.Nullable[Node]

type OffscreenCanvas

type Path2D
fn Path2D::add_path(Self, Self, transform~ : @js.Optional[DOMMatrix2DInit] = ..) -> Unit
fn Path2D::new(path~ : @js.Optional[@js.Union2[Self, String]] = ..) -> Self

type SVGImageElement

type Text
fn Text::to_node(Self) -> Node

type UIEvent
impl IsEvent for UIEvent
impl IsUIEvent for UIEvent

type Uint8ClampedArray

type VideoFrame

type WebGL2RenderingContext

type WebGLRenderingContext

type WheelEvent
fn WheelEvent::get_delta_mode(Self) -> Int
fn WheelEvent::get_delta_x(Self) -> Double
fn WheelEvent::get_delta_y(Self) -> Double
fn WheelEvent::get_delta_z(Self) -> Double
impl IsEvent for WheelEvent
impl IsMouseEvent for WheelEvent
impl IsUIEvent for WheelEvent

type Window
fn Window::alert(Self, String) -> Unit
fn Window::cancel_animation_frame(Self, Double) -> Unit
fn Window::confirm(Self, String) -> Bool
fn Window::current_url(Self) -> String
fn Window::history_go_back(Self) -> Unit
fn Window::history_go_forward(Self) -> Unit
fn Window::load_url(Self, String) -> Unit
fn Window::navigator(Self) -> Navigator
fn Window::push_url(Self, String) -> Unit
fn Window::reload_url(Self) -> Unit
fn Window::replace_url(Self, String) -> Unit
fn Window::request_animation_frame(Self, (Double) -> Unit) -> Double
fn Window::scroll_by(Self, Int, Int) -> Unit
fn Window::scroll_to(Self, Int, Int) -> Unit
fn Window::scroll_to_bottom(Self) -> Unit
fn Window::scroll_to_top(Self) -> Unit
fn Window::to_event_target(Self) -> EventTarget

// Type aliases
pub typealias @js.Union7[HTMLImageElement, SVGImageElement, HTMLVideoElement, HTMLCanvasElement, ImageBitmap, OffscreenCanvas, VideoFrame] as ImageUnion

pub typealias (Event) -> Unit as Listener

pub typealias String as PredefinedColorSpace

// Traits
pub trait IsElement : IsNode {
  as_element(Self) -> Element
  get_children(Self) -> Array[Element]
  set_attribute(Self, String, String) -> Unit
  get_attribute(Self, String) -> String
  remove_attribute(Self, String) -> Unit
  set_property(Self, String, @js.Value) -> Unit
  get_property(Self, String) -> String
  remove_property(Self, String) -> Unit
  scroll_into_view(Self) -> Unit
  get_scroll_top(Self) -> Double
  set_scroll_top(Self, Double) -> Unit
  get_scroll_left(Self) -> Double
  set_scroll_left(Self, Double) -> Unit
  get_scroll_width(Self) -> Double
  get_scroll_height(Self) -> Double
  set_inner_html(Self, String) -> Unit
  get_bounding_client_rect(Self) -> DOMRect
}

pub trait IsEvent {
  target(Self) -> EventTarget
  prevent_default(Self) -> Unit
  stop_propagation(Self) -> Unit
  as_event(Self) -> Event
  to_ui_event(Self) -> UIEvent?
  to_clipboard_event(Self) -> ClipboardEvent?
  to_mouse_event(Self) -> MouseEvent?
  to_input_event(Self) -> MouseEvent?
  to_focus_event(Self) -> MouseEvent?
  to_keyboard_event(Self) -> KeyboardEvent?
  to_animation_event(Self) -> AnimationEvent?
  to_before_unload_event(Self) -> BeforeUnloadEvent?
  to_blob_event(Self) -> BlobEvent?
  to_close_event(Self) -> CloseEvent?
  to_composition_event(Self) -> CompositionEvent?
  to_custom_event(Self) -> CustomEvent?
  to_drag_event(Self) -> DragEvent?
  to_wheel_event(Self) -> WheelEvent?
}

pub trait IsEventTarget {
  as_event_target(Self) -> EventTarget
  add_event_listener(Self, String, (Event) -> Unit) -> Unit
  remove_event_listener(Self, String, (Event) -> Unit) -> Unit
  dispatch_event(Self, Event) -> Unit
  to_clipboard(Self) -> Clipboard?
  to_node(Self) -> Node?
  to_document(Self) -> Document?
  to_document_fragment(Self) -> DocumentFragment?
  to_element(Self) -> Element?
  to_html_element(Self) -> HTMLElement?
  to_html_canvas_element(Self) -> HTMLCanvasElement?
  to_html_input_element(Self) -> HTMLInputElement?
  to_html_dialog_element(Self) -> HTMLDialogElement?
  to_html_image_element(Self) -> HTMLImageElement?
  to_html_select_element(Self) -> HTMLSelectElement?
  to_text(Self) -> Text?
}

pub trait IsHtmlElement : IsElement {
  as_html_element(Self) -> HTMLElement
  set_style(Self, String, String) -> Unit
  remove_style(Self, String) -> Unit
}

pub trait IsMouseEvent : IsUIEvent {
  as_mouse_event(Self) -> MouseEvent
  get_alt_key(Self) -> Bool
  get_button(Self) -> Int
  get_buttons(Self) -> Int
  get_client_x(Self) -> Int
  get_client_y(Self) -> Int
  get_ctrl_key(Self) -> Bool
  get_meta_key(Self) -> Bool
  get_movement_x(Self) -> Int
  get_movement_y(Self) -> Int
  get_offset_x(Self) -> Int
  get_offset_y(Self) -> Int
  get_page_x(Self) -> Int
  get_page_y(Self) -> Int
  get_related_target(Self) -> EventTarget
  get_screen_x(Self) -> Int
  get_screen_y(Self) -> Int
  get_shift_key(Self) -> Bool
  get_x(Self) -> Int
  get_y(Self) -> Int
  get_modifier_state(Self) -> Int
}

pub trait IsNode : IsEventTarget {
  as_node(Self) -> Node
  get_node_type(Self) -> Int
  get_node_name(Self) -> String
  get_node_value(Self) -> String
  get_first_child(Self) -> Node
  get_last_child(Self) -> Node
  get_next_sibling(Self) -> Node
  get_previous_sibling(Self) -> Node
  get_parent_node(Self) -> Node
  append_child(Self, Node) -> Unit
  remove_child(Self, Node) -> Unit
  replace_child(Self, Node, Node) -> Unit
  insert_before(Self, Node, Node) -> Unit
  get_child(Self, Int) -> Node
  get_child_count(Self) -> Int
}

pub trait IsUIEvent : IsEvent {
  as_ui_event(Self) -> UIEvent
}

